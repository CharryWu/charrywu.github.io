import{_ as l,o as i,c as t,O as o}from"./chunks/framework.786f5604.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dsa-notes/interview/index.md","filePath":"dsa-notes/interview/index.md"}'),a={name:"dsa-notes/interview/index.md"},r=o('<ol><li><p><a href="./binary-search.html"><strong>Binary Search</strong></a>:</p><ul><li><ol start="162"><li>Find Peak Element</li></ol></li><li><ol start="528"><li>Random Pick with Weight</li></ol></li><li><ol start="658"><li>Find K Closest Elements</li></ol></li></ul></li><li><p><a href="./sliding-window.html"><strong>Sliding Window</strong></a>:</p><ul><li><ol start="1004"><li>Max Consecutive Ones III</li></ol></li><li><ol start="30"><li>Substring with Concatenation of All Words</li></ol></li><li><ol start="76"><li>Minimum Window Substring</li></ol></li></ul></li><li><p><a href="./tree-graph-traversal.html"><strong>Tree or Graph Traversals</strong></a>:</p><ul><li><ol start="314"><li>Binary Tree Vertical Order Traversal</li></ol></li><li><ol start="938"><li>Range Sum of BST</li></ol></li><li><ol start="129"><li>Sum Root to Leaf Numbers</li></ol></li><li><ol start="236"><li>Lowest Common Ancestor of a Binary Tree</li></ol></li><li><ol start="116"><li>Populating Next Right Pointers in Each Node II</li></ol></li><li><ol start="117"><li>Populating Next Right Pointers in Each Node II</li></ol></li><li><ol start="543"><li>Diameter of Binary Tree</li></ol></li><li><ol start="133"><li>Clone Graph</li></ol></li></ul></li><li><p><a href="./dynamic-programming.html"><strong>Dynamic Programming</strong></a>:</p><ul><li><ol start="295"><li>Find Median from Data Stream</li></ol></li><li><ol start="22"><li>Generate Parentheses</li></ol></li><li><ol start="39"><li>Combination Sum</li></ol></li><li><ol start="629"><li>K Inverse Pairs Array</li></ol></li><li><ol start="727"><li>Minimum Window Subsequence</li></ol></li></ul></li><li><p><a href="./array-manipulation.html"><strong>Array Manipulation</strong></a>:</p><ul><li><ol start="384"><li>Shuffle an Array</li></ol></li><li><ol start="295"><li>Find Median from Data Stream</li></ol></li><li><ol start="215"><li>Kth Largest Element in an Array</li></ol></li><li><ol start="680"><li>Valid Palindrome II</li></ol></li><li><ol start="88"><li>Merge Sorted Array</li></ol></li><li><ol start="398"><li>Random Pick Index</li></ol></li><li><ol start="670"><li>Maximum Swap</li></ol></li><li><ol start="56"><li>Merge Intervals</li></ol></li></ul></li><li><p><a href="./string-manipulation.html"><strong>String Manipulation</strong></a>:</p><ul><li><ol start="1249"><li>Minimum Remove to Make Valid Parentheses</li></ol></li><li><ol start="408"><li>Valid Word Abbreviation</li></ol></li><li><ol start="140"><li>Word Break II</li></ol></li><li><ol start="71"><li>Simplify Path</li></ol></li><li><ol start="1047"><li>Remove All Adjacent Duplicates In String</li></ol></li><li><ol start="249"><li>Group Shifted Strings</li></ol></li><li><ol start="791"><li>Custom Sort String</li></ol></li></ul></li><li><p><a href="./hashing-and-counting.html"><strong>Hashing and Counting</strong></a>:</p><ul><li><ol start="560"><li>Subarray Sum Equals K</li></ol></li><li><ol start="525"><li>Contiguous Array</li></ol></li><li><ol start="1762"><li>Buildings With an Ocean View</li></ol></li><li><ol start="760"><li>Toeplitz Matrix</li></ol></li></ul></li><li><p><strong>Mathematics and Simulation</strong>:</p><ul><li><ol start="50"><li>Pow(x, n)</li></ol></li><li><ol start="670"><li>Maximum Swap</li></ol></li><li><ol start="766"><li>Toeplitz Matrix</li></ol></li><li><ol start="498"><li>Diagonal Traverse</li></ol></li></ul></li><li><p><strong>Heap and Priority Queue</strong>:</p><ul><li><ol start="295"><li>Find Median from Data Stream</li></ol></li><li><ol start="973"><li>K Closest Points to Origin</li></ol></li><li><ol start="973"><li>K Closest Points to Origin (alternative approach using quick select)</li></ol></li></ul></li><li><p><strong>Backtracking</strong>:</p></li></ol><ul><li><ol start="79"><li>Word Search</li></ol></li><li><ol start="22"><li>Generate Parentheses</li></ol></li><li><ol start="39"><li>Combination Sum</li></ol></li></ul><ol start="11"><li><strong>Graph Theory</strong>:</li></ol><ul><li><ol start="127"><li>Word Ladder</li></ol></li><li><ol start="133"><li>Clone Graph</li></ol></li><li><ol start="207"><li>Course Schedule</li></ol></li></ul><ol start="12"><li><strong>Design</strong>:</li></ol><ul><li><ol start="295"><li>Find Median from Data Stream</li></ol></li><li><ol start="346"><li>Moving Average from Data Stream</li></ol></li><li><ol start="227"><li>Basic Calculator II</li></ol></li></ul><ol start="13"><li><strong>Sparse Data Structures</strong>:</li></ol><ul><li><ol start="1570"><li>Dot Product of Two Sparse Vectors</li></ol></li></ul><ol start="14"><li><strong>Miscellaneous/Other Techniques</strong>:</li></ol><ul><li><ol start="133"><li>Clone Graph (deep copy using a hash map)</li></ol></li><li><ol start="269"><li>Alien Dictionary (topological sort using Kahn&#39;s algorithm)</li></ol></li><li><ol start="317"><li>Shortest Distance from All Buildings (multi-source BFS)</li></ol></li></ul><p>This categorization will help you to understand and retrieve solutions based on their underlying techniques and data structure utilization efficiently.</p>',11),e=[r];function s(n,u,d,g,m,p){return i(),t("div",null,e)}const S=l(a,[["render",s]]);export{c as __pageData,S as default};
