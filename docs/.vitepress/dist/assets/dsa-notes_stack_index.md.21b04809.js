import{_ as s,o as a,c as n,O as l}from"./chunks/framework.786f5604.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"dsa-notes/stack/index.md","filePath":"dsa-notes/stack/index.md"}'),o={name:"dsa-notes/stack/index.md"},t=l(`<h2 id="monotonic-stack" tabindex="-1">Monotonic Stack <a class="header-anchor" href="#monotonic-stack" aria-label="Permalink to &quot;Monotonic Stack&quot;">​</a></h2><p>A monotonic stack is a special type of stack that maintains a monotonic (either strictly increasing or strictly decreasing) order of elements. This data structure is particularly useful for solving problems that involve finding next greater/smaller elements, or previous greater/smaller elements in an array or sequence. Here are some types of LeetCode problems that can be efficiently solved using a monotonic stack:</p><h3 id="increasing-monotonic-stack-template" tabindex="-1">Increasing monotonic stack template <a class="header-anchor" href="#increasing-monotonic-stack-template" aria-label="Permalink to &quot;Increasing monotonic stack template&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increasing_monotonic_stack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">nums</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Initialize an empty stack</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Initialize an empty list to store the result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> nums</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># While the stack is not empty and the top element is greater than or equal to the current number</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># stack[-1] &gt;= num is a violation of increasing trend, need to pop until stack[-1] &lt; num</span></span>
<span class="line"><span style="color:#A6ACCD;">            stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Pop elements from the stack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># </span><span style="color:#89DDFF;font-style:italic;">TODO</span><span style="color:#676E95;font-style:italic;">: Custom logic updating result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">num</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Push the current number onto the stack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><h3 id="questions-that-can-be-solved-using-monotonic-stack" tabindex="-1">Questions that can be solved using monotonic stack <a class="header-anchor" href="#questions-that-can-be-solved-using-monotonic-stack" aria-label="Permalink to &quot;Questions that can be solved using monotonic stack&quot;">​</a></h3><ol><li><p><strong>Next Greater Element</strong>:</p><ul><li>Problems where you need to find the next element in an array that is greater than the current element.</li><li>Example: &quot;Next Greater Element I&quot; (LeetCode #496), &quot;Daily Temperatures&quot; (LeetCode #739).</li></ul></li><li><p><strong>Next Smaller Element</strong>:</p><ul><li>Similar to the next greater element but finding the next smaller element.</li><li>Example: Custom problem statement, but similar to next greater element problems but with a different condition.</li></ul></li><li><p><strong>Previous Greater Element</strong>:</p><ul><li>Finding the previous element in an array that is greater than the current element.</li><li>Example: Custom problem statement, but similar to next greater element problems but in the reverse direction.</li></ul></li><li><p><strong>Previous Smaller Element</strong>:</p><ul><li>Finding the previous element in an array that is smaller than the current element.</li><li>Example: Custom problem statement, but similar to next greater element problems but with a different condition and in the reverse direction.</li></ul></li><li><p><strong>Largest Rectangle in Histogram</strong>:</p><ul><li>Finding the largest rectangle that can be formed in a histogram where the bars have different heights.</li><li>Example: &quot;Largest Rectangle in Histogram&quot; (LeetCode #84).</li></ul></li><li><p><strong>Maximal Rectangle</strong>:</p><ul><li>Extending the largest rectangle in a histogram to a 2D matrix to find the largest rectangle of &#39;1&#39;s.</li><li>Example: &quot;Maximal Rectangle&quot; (LeetCode #85).</li></ul></li><li><p><strong>Stock Span Problem</strong>:</p><ul><li>Finding the span of a stock&#39;s price for each day, which is the number of consecutive days just before the current day where the price was less than or equal to today&#39;s price.</li><li>Example: &quot;Online Stock Span&quot; (LeetCode #901).</li></ul></li><li><p><strong>Asteroid Collision</strong>:</p><ul><li>Simulating the collision of asteroids moving in different directions and determining the final state of the asteroids.</li><li>Example: &quot;Asteroid Collision&quot; (LeetCode #735).</li></ul></li></ol><p>Using a monotonic stack can significantly reduce the time complexity of these problems from O(n^2) to O(n), making it a very efficient approach for such scenarios.</p><h3 id="car-fleet-increasing-monotonic-stack" tabindex="-1">Car fleet (increasing monotonic stack) <a class="header-anchor" href="#car-fleet-increasing-monotonic-stack" aria-label="Permalink to &quot;Car fleet (increasing monotonic stack)&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">carFleet</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">position</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">speed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Build a stack of car arrival times</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        First sort the position from closest to target to furthest, so can detect collision</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        in linear one-pass loop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Then build stack, if the arrival time of new car is lower than stack end car, but since it&#39;s farther away</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Then we know new car is moving too fast and can collide with stack end car before destination</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        If the arrival time of new car is greater than stack end car, but since it&#39;s farther away</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Then we know new car is NOT going to collide with stack end car before destination, we can safely append it to make itself a car fleet</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        pairs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">list</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">zip</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">position</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> speed</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        pairs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reverse</span><span style="color:#89DDFF;">=True)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># sort all cars by position, so we can tell if there&#39;s intersect or not</span></span>
<span class="line"><span style="color:#A6ACCD;">        stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> s </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> pairs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            curArrivalTime </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;">s</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># if curArrivalTime &lt;= stack top time, the car (p,s) is moving too fast</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># and is going to intersect stack[-1] before reaching target</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># if curArrivalTime &gt; stack top time, the car (p,s) is moving too slow</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;"># and is NOT going to intersect, therefore making its own car fleet</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stack</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stack</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> curArrivalTime </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]):</span></span>
<span class="line"><span style="color:#A6ACCD;">                stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">curArrivalTime</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># push arrival time</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># stack is stictly increasing arrival times of individual car fleets</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># its length is # of car fleets</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">stack</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="daily-temperatures-decreasing-monotonic-stack" tabindex="-1">Daily Temperatures (decreasing monotonic stack) <a class="header-anchor" href="#daily-temperatures-decreasing-monotonic-stack" aria-label="Permalink to &quot;Daily Temperatures (decreasing monotonic stack)&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dailyTemperatures</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">temperatures</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">        stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">        res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">temperatures</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumerate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">temperatures</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                stackT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stackI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                res</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">stackI</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> stackI</span></span>
<span class="line"><span style="color:#A6ACCD;">            stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">t</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span></span></code></pre></div><h3 id="largest-rectangle-in-histogram" tabindex="-1">Largest Rectangle In Histogram <a class="header-anchor" href="#largest-rectangle-in-histogram" aria-label="Permalink to &quot;Largest Rectangle In Histogram&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Solution</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">largestRectangleArea</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">heights</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># build monotonic stack of increasing heights from input. If encounter a smaller height</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># remove all most recent added higher heights until stack top is smaller than new height</span></span>
<span class="line"><span style="color:#A6ACCD;">        res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># height, index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># PRECONDITION: all max areas before i have been computed and considered</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># POSTCONDITION: compute max area with current i as right boundary</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> h </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">enumerate</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">heights</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> i</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> h </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">][</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">                stackH</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> stackI </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># max area boundary [stackI, i-1], inclusive. Width is i-stackI</span></span>
<span class="line"><span style="color:#A6ACCD;">                res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">res</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">stackI</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;"> stackH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                start </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> stackI </span><span style="color:#676E95;font-style:italic;"># if new h &lt; height popped (stackH), max area bounded by new h can extend backwards all the way to stackI</span></span>
<span class="line"><span style="color:#A6ACCD;">            stack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">h</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> start</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">max</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">res</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> h</span><span style="color:#89DDFF;">*(</span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">heights</span><span style="color:#89DDFF;">)-</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span></span></code></pre></div>`,13),e=[t];function p(c,r,i,y,D,F){return a(),n("div",null,e)}const m=s(o,[["render",p]]);export{C as __pageData,m as default};
