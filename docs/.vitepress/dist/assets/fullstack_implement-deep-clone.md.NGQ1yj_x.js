import{_ as i,c as s,o as a,ae as t}from"./chunks/framework.BHrE6nLq.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fullstack/implement-deep-clone.md","filePath":"fullstack/implement-deep-clone.md"}'),n={name:"fullstack/implement-deep-clone.md"};function l(h,e,o,p,r,k){return a(),s("div",null,e[0]||(e[0]=[t(`<h2 id="deep-clone" tabindex="-1">Deep Clone <a class="header-anchor" href="#deep-clone" aria-label="Permalink to &quot;Deep Clone&quot;">​</a></h2><p>Implement a <code>deepClone</code> function that performs a deep clone operation on JavaScript objects. You can assume the input only contains JSON-serializable values (<code>null</code>, <code>boolean</code>, <code>number</code>, <code>string</code>, <code>Array</code>, <code>Object</code>) and will not contain any other objects like <code>Date</code>, <code>Regex</code>, <code>Map</code> or <code>Set</code>.</p><h3 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deepClone);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(([</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [k, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="explanation" tabindex="-1">Explanation <a class="header-anchor" href="#explanation" aria-label="Permalink to &quot;Explanation&quot;">​</a></h3><p>There are generally two ways we can traverse an object:</p><ul><li>Loop through the keys with the good old <code>for ... in</code> statement.</li><li>Converting the object into an array of keys with <code>Object.keys()</code>, or an array of a key-value tuple with <code>Object.entries()</code>. With the <code>for ... in</code> statement, inherited enumerable properties are processed as well. On the other hand, <code>Object.keys()</code> and <code>Object.entries()</code> only care about the properties directly defined on the object, and this is usually what we want.</li></ul><h3 id="edge-cases" tabindex="-1">Edge Cases <a class="header-anchor" href="#edge-cases" aria-label="Permalink to &quot;Edge Cases&quot;">​</a></h3><ul><li>Non-enumerable and symbol-keyed properties are ignored.</li><li>Property descriptors are not respected and copied into the cloned object.</li><li>If the object has circular references, the current solution will break and cause a stack overflow by recursing into an infinite loop.</li><li>Prototypes are not copied.</li></ul><h3 id="one-liner-solution" tabindex="-1">One-liner Solution <a class="header-anchor" href="#one-liner-solution" aria-label="Permalink to &quot;One-liner Solution&quot;">​</a></h3><p>As of writing, all major browsers have native support for performing deep clone via the <code>structuredClone</code> API. Check out <a href="https://web.dev/articles/structured-clone" target="_blank" rel="noreferrer">&quot;Deep-copying in JavaScript using structuredClone&quot;</a> on web.dev if you want to learn more about <code>structuredClone</code>&#39;s features and limitations.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> clonedObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> structuredClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span></code></pre></div>`,12)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
